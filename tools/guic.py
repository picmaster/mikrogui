#!/usr/bin/env python
#
# Copyright (C) 2016 Nikolay Dimitrov <picmaster@mail.bg>
#
# SPDX-License-Identifier: BSD-3-Clause
#
# Tiny GUI/resource compiler for the mikrogui project

import sys, json
from string import Template
from datetime import *

VERSION = "0.1.0"
URL = "https://github.com/picmaster/mikrogui"

def timestamp():
    return datetime.now().strftime("%d.%B.%Y %H:%M:%S")

def gen_framebuffer_code(args):
    display_name = args[1]
    display_conf = "config/display/%s.conf" % display_name
    print "Reading display configuration: %s\n" % display_conf
    display = json.load(open(display_conf))["display"]

    w, h, bpp, pixfmt = display["width"], display["height"], display["bpp"], display["pixel_format"]
    pixels = w * h
    bytes = (pixels * bpp) / 8

    params = {"bytes": bytes, "pixels": pixels, "width": w, "height": h, "bpp": bpp, "pixfmt": pixfmt}
    params["disp_conf"] = "%s.conf" % display_name
    params["url"] = URL
    params["guic_info"] = "guic.py v%s" % VERSION
    params["timestamp"] = timestamp()

    tmpl = "templates/framebuffer/framebuffer_gen.c.tmpl"
    print "Reading template: %s" % tmpl
    t = Template(open(tmpl).read())

    out = "framebuffer_gen.c"
    print "Writing generated code: %s\n" % out
    open(out, "w").write(t.safe_substitute(params))

    if bpp >= 1 and bpp <= 8:
        pixtype = "uint8_t"
    elif bpp > 8 and bpp <= 16:
        pixtype = "uint16_t"
    elif bpp > 16 and bpp <= 32:
        pixtype = "uint32_t"

    params = {"type": pixtype}
    params["disp_conf"] = "%s.conf" % display_name
    params["url"] = URL
    params["guic_info"] = "guic.py v%s" % VERSION
    params["timestamp"] = timestamp()

    tmpl = "templates/framebuffer/framebuffer_gen.h.tmpl"
    print "Reading template: %s" % tmpl
    t = Template(open(tmpl).read())

    out = "framebuffer_gen.h"
    print "Writing generated code: %s\n" % out
    open(out, "w").write(t.safe_substitute(params))

def generate_bin_arrays(in_files, out_file_basename = "resources_gen"):
    f = open("%s.h" % out_file_basename, "w")
    f.write("// Do not edit this file! It was automatically generated by GUIC.\n\n")
    f.write("typedef enum resource_id_e\n{\n")
    f.write("    RES_ID_INVALID = 0,\n")

    for i in in_files:
        f.write("    RES_ID_%s,\n" % i)

    f.write("    RES_ID_MAX\n")
    f.write("} resource_id_t;\n\n")
    f.close()

def main(args):
    print "guic.py v%s\n" % VERSION
    gen_framebuffer_code(args)
    return

    fonts = list()
    images = list()

    form_file = open(args[1])
    form = json.load(form_file)

    widgets = form["form"]["widgets"]
    print "Found %d widgets:\n" % len(widgets)

    for w in widgets:
        print "%s: %s" % (w["id"], w["type"])

    # Scan for resources
    for w in widgets:
        if w["type"] == "label":
            fonts.append(w["font"])

        if w["type"] == "image":
            images.append(w["path"])

    # Remove duplicates
    fonts = list(set(fonts))
    images = list(set(images))

    print "\nResource list:"
    print "\tFonts: %s" % fonts
    print "\tImages: %s" % images

    generate_bin_arrays(fonts + images)

if __name__ == "__main__":
    main(sys.argv)

